{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.3", "generated_at": "2025-04-19T19:25:13.344880Z", "invocation_id": "c9e939bf-cb0a-4c83-8fed-86a0ed09e66f", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.583060Z", "completed_at": "2025-04-19T19:25:12.596831Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.597127Z", "completed_at": "2025-04-19T19:25:12.597136Z"}], "thread_id": "Thread-1", "execution_time": 0.01463007926940918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_exposure_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "\"dw\".\"public\".\"base_exposure_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.598140Z", "completed_at": "2025-04-19T19:25:12.603047Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.603319Z", "completed_at": "2025-04-19T19:25:12.603326Z"}], "thread_id": "Thread-1", "execution_time": 0.005671024322509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_metric_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "\"dw\".\"public\".\"base_metric_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.604466Z", "completed_at": "2025-04-19T19:25:12.615044Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.615350Z", "completed_at": "2025-04-19T19:25:12.615358Z"}], "thread_id": "Thread-1", "execution_time": 0.011543035507202148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_node_columns", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "relation_name": "\"dw\".\"public\".\"base_node_columns\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.616383Z", "completed_at": "2025-04-19T19:25:12.624081Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.624353Z", "completed_at": "2025-04-19T19:25:12.624360Z"}], "thread_id": "Thread-1", "execution_time": 0.008497953414916992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_node_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "\"dw\".\"public\".\"base_node_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.625557Z", "completed_at": "2025-04-19T19:25:12.630792Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.631043Z", "completed_at": "2025-04-19T19:25:12.631050Z"}], "thread_id": "Thread-1", "execution_time": 0.006075859069824219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_source_columns", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "relation_name": "\"dw\".\"public\".\"base_source_columns\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.632080Z", "completed_at": "2025-04-19T19:25:12.641155Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.641510Z", "completed_at": "2025-04-19T19:25:12.641517Z"}], "thread_id": "Thread-1", "execution_time": 0.010008811950683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_exposures", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT ) as unique_id,\n    cast(null as TEXT ) as name,\n    cast(null as TEXT ) as resource_type,\n    cast(null as TEXT ) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT ) as exposure_type,\n    cast(null as TEXT ) as maturity,\n    cast(null as TEXT ) as package_name,\n    cast(null as TEXT ) as url,\n    cast(null as TEXT ) as owner_name,\n    cast(null as TEXT ) as owner_email,\n    cast(null as TEXT ) as meta\n\nfrom dummy_cte\nwhere false", "relation_name": "\"dw\".\"public\".\"stg_exposures\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.642618Z", "completed_at": "2025-04-19T19:25:12.653452Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.653715Z", "completed_at": "2025-04-19T19:25:12.653722Z"}], "thread_id": "Thread-1", "execution_time": 0.011608123779296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_metrics", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as metric_type,\n    cast(null as TEXT) as label,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as metric_filter,\n    cast(null as TEXT) as metric_measure,\n    cast(null as TEXT) as metric_measure_alias,\n    cast(null as TEXT) as numerator,\n    cast(null as TEXT) as denominator,\n    cast(null as TEXT) as expr,\n    cast(null as TEXT) as metric_window,\n    cast(null as TEXT) as grain_to_date,\n    cast(null as TEXT) as meta\n\nfrom dummy_cte\nwhere false", "relation_name": "\"dw\".\"public\".\"stg_metrics\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.654701Z", "completed_at": "2025-04-19T19:25:12.668701Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.669014Z", "completed_at": "2025-04-19T19:25:12.669022Z"}], "thread_id": "Thread-1", "execution_time": 0.014806032180786133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_naming_convention_folders", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_folders_table as (\n    \n        select 'base_folder_name' as var_name, 'base' as var_value\n        union all\n        select 'staging_folder_name' as var_name, 'staging' as var_value\n        union all\n        select 'intermediate_folder_name' as var_name, 'intermediate' as var_value\n        union all\n        select 'marts_folder_name' as var_name, 'marts' as var_value\n        \n)\n\nselect\n    var_name as folder_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_folder_name'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "relation_name": "\"dw\".\"public\".\"stg_naming_convention_folders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.670047Z", "completed_at": "2025-04-19T19:25:12.683976Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.684319Z", "completed_at": "2025-04-19T19:25:12.684326Z"}], "thread_id": "Thread-1", "execution_time": 0.01477503776550293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_naming_convention_prefixes", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_prefix_table as (\n    \n            select 'base_prefixes' as var_name, 'base_' as var_value\n            union all\n            select 'staging_prefixes' as var_name, 'stg_' as var_value\n            union all\n            select 'intermediate_prefixes' as var_name, 'int_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'fct_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'dim_' as var_value\n            union all\n            select 'other_prefixes' as var_name, 'rpt_' as var_value\n            \n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_prefixes'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        md5(cast(coalesce(cast(model_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(prefix_value as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "relation_name": "\"dw\".\"public\".\"stg_naming_convention_prefixes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.685420Z", "completed_at": "2025-04-19T19:25:12.697347Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.697564Z", "completed_at": "2025-04-19T19:25:12.697571Z"}], "thread_id": "Thread-1", "execution_time": 0.01267695426940918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_nodes", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as materialized,\n    cast(null as TEXT) as on_schema_change,\n    cast(null as TEXT) as model_group,\n    cast(null as TEXT) as access,\n    cast(null as TEXT) as latest_version,\n    cast(null as TEXT) as version,\n    cast(null as TEXT) as deprecation_date,\n    cast(True as boolean) as is_contract_enforced,\n    cast(0 as integer) as total_defined_columns,\n    cast(0 as integer) as total_described_columns,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as alias,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as column_name,\n    cast(null as TEXT) as meta,\n    cast(null as TEXT) as hard_coded_references,\n    cast(null as integer) as number_lines,\n    cast(null as float) as sql_complexity,\n    cast(null as TEXT) as macro_dependencies,\n    cast(True as boolean) as is_generic_test,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "relation_name": "\"dw\".\"public\".\"stg_nodes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.698478Z", "completed_at": "2025-04-19T19:25:12.707161Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.707344Z", "completed_at": "2025-04-19T19:25:12.707348Z"}], "thread_id": "Thread-1", "execution_time": 0.009299039840698242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_sources", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as file_path,\n    cast(null as TEXT) as alias,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as source_name,\n    cast(True as boolean) as is_source_described,\n    cast(True as boolean) as is_described,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as loaded_at_field,\n    cast(True as boolean) as is_freshness_enabled,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as loader,\n    cast(null as TEXT) as identifier,\n    cast(null as TEXT)  as meta,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "relation_name": "\"dw\".\"public\".\"stg_sources\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.708257Z", "completed_at": "2025-04-19T19:25:12.714217Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.714408Z", "completed_at": "2025-04-19T19:25:12.714412Z"}], "thread_id": "Thread-1", "execution_time": 0.0066280364990234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_dbt_project.stg_jaffle_shop__customers", "compiled": true, "compiled_code": "with source as (\n    select * from \"dw\".\"public_jaffle_shop\".\"customers\"\n)\n,\n\nrenamed as (\n    select\n        \"ID\" as customer_id,\n        \"FIRST_NAME\" as first_name,\n        \"LAST_NAME\" as last_name\n    from source\n)\n\nselect * from renamed", "relation_name": "\"dw\".\"public\".\"stg_jaffle_shop__customers\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.715236Z", "completed_at": "2025-04-19T19:25:12.721269Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.721445Z", "completed_at": "2025-04-19T19:25:12.721448Z"}], "thread_id": "Thread-1", "execution_time": 0.006590127944946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_dbt_project.stg_jaffle_shop__orders", "compiled": true, "compiled_code": "-- filepath: /Users/fehmmialiti/docker_learning/dbt_airflow/dbt_project/models/staging/jaffle_shop/stg_jaffle_shop_orders.sql\nwith source as (\n    select * from \"dw\".\"public_jaffle_shop\".\"orders\"\n)\n,\n\nrenamed as (\n    select\n        \"ID\" as order_id,\n        \"USER_ID\" as customer_id,\n        \"ORDER_DATE\" as order_date,\n        \"STATUS\" as status\n    from source\n)\n\nselect * from renamed", "relation_name": "\"dw\".\"public\".\"stg_jaffle_shop__orders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.722324Z", "completed_at": "2025-04-19T19:25:12.728232Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.728407Z", "completed_at": "2025-04-19T19:25:12.728410Z"}], "thread_id": "Thread-1", "execution_time": 0.006530046463012695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_dbt_project.stg_jaffle_shop__payments", "compiled": true, "compiled_code": "with source as (\n    select * from \"dw\".\"public_jaffle_shop\".\"payments\"\n)\n,\n\nrenamed as (\n    select\n        \"ID\" as id,\n        \"ORDERID\" as order_id,\n        \"PAYMENTMETHOD\" as paymentmethod,\n        \"STATUS\" as status,\n        \"AMOUNT\" as amount,\n        \"CREATED\" as created\n    from source\n)\n\nselect * from renamed", "relation_name": "\"dw\".\"public\".\"stg_jaffle_shop__payments\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.729292Z", "completed_at": "2025-04-19T19:25:12.730276Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.730443Z", "completed_at": "2025-04-19T19:25:12.730445Z"}], "thread_id": "Thread-1", "execution_time": 0.0015900135040283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.731263Z", "completed_at": "2025-04-19T19:25:12.732168Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.732335Z", "completed_at": "2025-04-19T19:25:12.732337Z"}], "thread_id": "Thread-1", "execution_time": 0.0014538764953613281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.my_dbt_project.customers", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.733136Z", "completed_at": "2025-04-19T19:25:12.734044Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.734201Z", "completed_at": "2025-04-19T19:25:12.734203Z"}], "thread_id": "Thread-1", "execution_time": 0.00144195556640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.my_dbt_project.orders", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.734955Z", "completed_at": "2025-04-19T19:25:12.735983Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.736398Z", "completed_at": "2025-04-19T19:25:12.736400Z"}], "thread_id": "Thread-1", "execution_time": 0.0018000602722167969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.my_dbt_project.payments", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.737238Z", "completed_at": "2025-04-19T19:25:12.738765Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.738924Z", "completed_at": "2025-04-19T19:25:12.738926Z"}], "thread_id": "Thread-1", "execution_time": 0.0020639896392822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.my_dbt_project.raw_customers", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.739678Z", "completed_at": "2025-04-19T19:25:12.740538Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.740710Z", "completed_at": "2025-04-19T19:25:12.740712Z"}], "thread_id": "Thread-1", "execution_time": 0.0013928413391113281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.my_dbt_project.raw_items", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.741474Z", "completed_at": "2025-04-19T19:25:12.742336Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.742491Z", "completed_at": "2025-04-19T19:25:12.742493Z"}], "thread_id": "Thread-1", "execution_time": 0.0013761520385742188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.my_dbt_project.raw_orders", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.743294Z", "completed_at": "2025-04-19T19:25:12.744199Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.744363Z", "completed_at": "2025-04-19T19:25:12.744365Z"}], "thread_id": "Thread-1", "execution_time": 0.0014841556549072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.my_dbt_project.raw_products", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.745126Z", "completed_at": "2025-04-19T19:25:12.745973Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.746127Z", "completed_at": "2025-04-19T19:25:12.746129Z"}], "thread_id": "Thread-1", "execution_time": 0.0013580322265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.my_dbt_project.raw_stores", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.746877Z", "completed_at": "2025-04-19T19:25:12.747751Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.747909Z", "completed_at": "2025-04-19T19:25:12.747911Z"}], "thread_id": "Thread-1", "execution_time": 0.0013973712921142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.my_dbt_project.raw_supplies", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.748757Z", "completed_at": "2025-04-19T19:25:12.756557Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.756729Z", "completed_at": "2025-04-19T19:25:12.756733Z"}], "thread_id": "Thread-1", "execution_time": 0.008430004119873047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_exposure_relationships", "compiled": true, "compiled_code": "with \n\n_base_exposure_relationships as (\n    select * from \"dw\".\"public\".\"base_exposure_relationships\"\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_exposure_relationships\n)\n\nselect distinct * from final", "relation_name": "\"dw\".\"public\".\"stg_exposure_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.757538Z", "completed_at": "2025-04-19T19:25:12.763105Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.763270Z", "completed_at": "2025-04-19T19:25:12.763273Z"}], "thread_id": "Thread-1", "execution_time": 0.006112098693847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_metric_relationships", "compiled": true, "compiled_code": "with \n\n_base_metric_relationships as (\n    select * from \"dw\".\"public\".\"base_metric_relationships\"\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_metric_relationships\n)\n\nselect distinct * from final", "relation_name": "\"dw\".\"public\".\"stg_metric_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.764059Z", "completed_at": "2025-04-19T19:25:12.772269Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.772449Z", "completed_at": "2025-04-19T19:25:12.772453Z"}], "thread_id": "Thread-1", "execution_time": 0.008767127990722656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_node_relationships", "compiled": true, "compiled_code": "with \n\n_base_node_relationships as (\n    select * from \"dw\".\"public\".\"base_node_relationships\"\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_node_relationships\n)\n\n-- we need distinct as the graph lists relationships multiple times if they are ref'd multiple times\nselect distinct * from final", "relation_name": "\"dw\".\"public\".\"stg_node_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.773285Z", "completed_at": "2025-04-19T19:25:12.838257Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.838455Z", "completed_at": "2025-04-19T19:25:12.838461Z"}], "thread_id": "Thread-1", "execution_time": 0.06640315055847168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_columns", "compiled": true, "compiled_code": "with\n\nfinal as (\n\n    \n\n        (\n            select\n                cast('\"dw\".\"public\".\"base_node_columns\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"node_unique_id\" as text) as \"node_unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"description\" as text) as \"description\" ,\n                    cast(\"data_type\" as text) as \"data_type\" ,\n                    cast(\"constraints\" as text) as \"constraints\" ,\n                    cast(\"has_not_null_constraint\" as boolean) as \"has_not_null_constraint\" ,\n                    cast(\"constraints_count\" as integer) as \"constraints_count\" ,\n                    cast(\"quote\" as text) as \"quote\" \n\n            from \"dw\".\"public\".\"base_node_columns\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"dw\".\"public\".\"base_source_columns\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"node_unique_id\" as text) as \"node_unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"description\" as text) as \"description\" ,\n                    cast(\"data_type\" as text) as \"data_type\" ,\n                    cast(\"constraints\" as text) as \"constraints\" ,\n                    cast(\"has_not_null_constraint\" as boolean) as \"has_not_null_constraint\" ,\n                    cast(\"constraints_count\" as integer) as \"constraints_count\" ,\n                    cast(\"quote\" as text) as \"quote\" \n\n            from \"dw\".\"public\".\"base_source_columns\"\n\n            \n        )\n\n        \n)\n\nselect * from final", "relation_name": "\"dw\".\"public\".\"stg_columns\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.840238Z", "completed_at": "2025-04-19T19:25:12.900790Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.901035Z", "completed_at": "2025-04-19T19:25:12.901042Z"}], "thread_id": "Thread-1", "execution_time": 0.06263566017150879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_all_graph_resources", "compiled": true, "compiled_code": "-- one row for each resource in the graph\n\n\n\nwith unioned as (\n\n    \n\n        (\n            select\n                cast('\"dw\".\"public\".\"stg_nodes\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as text) as \"unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"resource_type\" as text) as \"resource_type\" ,\n                    cast(\"file_path\" as text) as \"file_path\" ,\n                    cast(\"is_enabled\" as boolean) as \"is_enabled\" ,\n                    cast(\"materialized\" as text) as \"materialized\" ,\n                    cast(\"on_schema_change\" as text) as \"on_schema_change\" ,\n                    cast(\"model_group\" as text) as \"model_group\" ,\n                    cast(\"access\" as text) as \"access\" ,\n                    cast(\"latest_version\" as text) as \"latest_version\" ,\n                    cast(\"version\" as text) as \"version\" ,\n                    cast(\"deprecation_date\" as text) as \"deprecation_date\" ,\n                    cast(\"is_contract_enforced\" as boolean) as \"is_contract_enforced\" ,\n                    cast(\"total_defined_columns\" as integer) as \"total_defined_columns\" ,\n                    cast(\"total_described_columns\" as integer) as \"total_described_columns\" ,\n                    cast(\"database\" as text) as \"database\" ,\n                    cast(\"schema\" as text) as \"schema\" ,\n                    cast(\"package_name\" as text) as \"package_name\" ,\n                    cast(\"alias\" as text) as \"alias\" ,\n                    cast(\"is_described\" as boolean) as \"is_described\" ,\n                    cast(\"column_name\" as text) as \"column_name\" ,\n                    cast(\"meta\" as text) as \"meta\" ,\n                    cast(\"hard_coded_references\" as text) as \"hard_coded_references\" ,\n                    cast(\"number_lines\" as integer) as \"number_lines\" ,\n                    cast(\"sql_complexity\" as double precision) as \"sql_complexity\" ,\n                    cast(\"macro_dependencies\" as text) as \"macro_dependencies\" ,\n                    cast(\"is_generic_test\" as boolean) as \"is_generic_test\" ,\n                    cast(\"is_excluded\" as boolean) as \"is_excluded\" ,\n                    cast(null as text) as \"exposure_type\" ,\n                    cast(null as text) as \"maturity\" ,\n                    cast(null as text) as \"url\" ,\n                    cast(null as text) as \"owner_name\" ,\n                    cast(null as text) as \"owner_email\" ,\n                    cast(null as text) as \"metric_type\" ,\n                    cast(null as text) as \"label\" ,\n                    cast(null as text) as \"metric_filter\" ,\n                    cast(null as text) as \"metric_measure\" ,\n                    cast(null as text) as \"metric_measure_alias\" ,\n                    cast(null as text) as \"numerator\" ,\n                    cast(null as text) as \"denominator\" ,\n                    cast(null as text) as \"expr\" ,\n                    cast(null as text) as \"metric_window\" ,\n                    cast(null as text) as \"grain_to_date\" ,\n                    cast(null as text) as \"source_name\" ,\n                    cast(null as boolean) as \"is_source_described\" ,\n                    cast(null as text) as \"loaded_at_field\" ,\n                    cast(null as boolean) as \"is_freshness_enabled\" ,\n                    cast(null as text) as \"loader\" ,\n                    cast(null as text) as \"identifier\" \n\n            from \"dw\".\"public\".\"stg_nodes\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"dw\".\"public\".\"stg_exposures\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as text) as \"unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"resource_type\" as text) as \"resource_type\" ,\n                    cast(\"file_path\" as text) as \"file_path\" ,\n                    cast(null as boolean) as \"is_enabled\" ,\n                    cast(null as text) as \"materialized\" ,\n                    cast(null as text) as \"on_schema_change\" ,\n                    cast(null as text) as \"model_group\" ,\n                    cast(null as text) as \"access\" ,\n                    cast(null as text) as \"latest_version\" ,\n                    cast(null as text) as \"version\" ,\n                    cast(null as text) as \"deprecation_date\" ,\n                    cast(null as boolean) as \"is_contract_enforced\" ,\n                    cast(null as integer) as \"total_defined_columns\" ,\n                    cast(null as integer) as \"total_described_columns\" ,\n                    cast(null as text) as \"database\" ,\n                    cast(null as text) as \"schema\" ,\n                    cast(\"package_name\" as text) as \"package_name\" ,\n                    cast(null as text) as \"alias\" ,\n                    cast(\"is_described\" as boolean) as \"is_described\" ,\n                    cast(null as text) as \"column_name\" ,\n                    cast(\"meta\" as text) as \"meta\" ,\n                    cast(null as text) as \"hard_coded_references\" ,\n                    cast(null as integer) as \"number_lines\" ,\n                    cast(null as double precision) as \"sql_complexity\" ,\n                    cast(null as text) as \"macro_dependencies\" ,\n                    cast(null as boolean) as \"is_generic_test\" ,\n                    cast(null as boolean) as \"is_excluded\" ,\n                    cast(\"exposure_type\" as text) as \"exposure_type\" ,\n                    cast(\"maturity\" as text) as \"maturity\" ,\n                    cast(\"url\" as text) as \"url\" ,\n                    cast(\"owner_name\" as text) as \"owner_name\" ,\n                    cast(\"owner_email\" as text) as \"owner_email\" ,\n                    cast(null as text) as \"metric_type\" ,\n                    cast(null as text) as \"label\" ,\n                    cast(null as text) as \"metric_filter\" ,\n                    cast(null as text) as \"metric_measure\" ,\n                    cast(null as text) as \"metric_measure_alias\" ,\n                    cast(null as text) as \"numerator\" ,\n                    cast(null as text) as \"denominator\" ,\n                    cast(null as text) as \"expr\" ,\n                    cast(null as text) as \"metric_window\" ,\n                    cast(null as text) as \"grain_to_date\" ,\n                    cast(null as text) as \"source_name\" ,\n                    cast(null as boolean) as \"is_source_described\" ,\n                    cast(null as text) as \"loaded_at_field\" ,\n                    cast(null as boolean) as \"is_freshness_enabled\" ,\n                    cast(null as text) as \"loader\" ,\n                    cast(null as text) as \"identifier\" \n\n            from \"dw\".\"public\".\"stg_exposures\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"dw\".\"public\".\"stg_metrics\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as text) as \"unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"resource_type\" as text) as \"resource_type\" ,\n                    cast(\"file_path\" as text) as \"file_path\" ,\n                    cast(null as boolean) as \"is_enabled\" ,\n                    cast(null as text) as \"materialized\" ,\n                    cast(null as text) as \"on_schema_change\" ,\n                    cast(null as text) as \"model_group\" ,\n                    cast(null as text) as \"access\" ,\n                    cast(null as text) as \"latest_version\" ,\n                    cast(null as text) as \"version\" ,\n                    cast(null as text) as \"deprecation_date\" ,\n                    cast(null as boolean) as \"is_contract_enforced\" ,\n                    cast(null as integer) as \"total_defined_columns\" ,\n                    cast(null as integer) as \"total_described_columns\" ,\n                    cast(null as text) as \"database\" ,\n                    cast(null as text) as \"schema\" ,\n                    cast(\"package_name\" as text) as \"package_name\" ,\n                    cast(null as text) as \"alias\" ,\n                    cast(\"is_described\" as boolean) as \"is_described\" ,\n                    cast(null as text) as \"column_name\" ,\n                    cast(\"meta\" as text) as \"meta\" ,\n                    cast(null as text) as \"hard_coded_references\" ,\n                    cast(null as integer) as \"number_lines\" ,\n                    cast(null as double precision) as \"sql_complexity\" ,\n                    cast(null as text) as \"macro_dependencies\" ,\n                    cast(null as boolean) as \"is_generic_test\" ,\n                    cast(null as boolean) as \"is_excluded\" ,\n                    cast(null as text) as \"exposure_type\" ,\n                    cast(null as text) as \"maturity\" ,\n                    cast(null as text) as \"url\" ,\n                    cast(null as text) as \"owner_name\" ,\n                    cast(null as text) as \"owner_email\" ,\n                    cast(\"metric_type\" as text) as \"metric_type\" ,\n                    cast(\"label\" as text) as \"label\" ,\n                    cast(\"metric_filter\" as text) as \"metric_filter\" ,\n                    cast(\"metric_measure\" as text) as \"metric_measure\" ,\n                    cast(\"metric_measure_alias\" as text) as \"metric_measure_alias\" ,\n                    cast(\"numerator\" as text) as \"numerator\" ,\n                    cast(\"denominator\" as text) as \"denominator\" ,\n                    cast(\"expr\" as text) as \"expr\" ,\n                    cast(\"metric_window\" as text) as \"metric_window\" ,\n                    cast(\"grain_to_date\" as text) as \"grain_to_date\" ,\n                    cast(null as text) as \"source_name\" ,\n                    cast(null as boolean) as \"is_source_described\" ,\n                    cast(null as text) as \"loaded_at_field\" ,\n                    cast(null as boolean) as \"is_freshness_enabled\" ,\n                    cast(null as text) as \"loader\" ,\n                    cast(null as text) as \"identifier\" \n\n            from \"dw\".\"public\".\"stg_metrics\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"dw\".\"public\".\"stg_sources\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as text) as \"unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"resource_type\" as text) as \"resource_type\" ,\n                    cast(\"file_path\" as text) as \"file_path\" ,\n                    cast(\"is_enabled\" as boolean) as \"is_enabled\" ,\n                    cast(null as text) as \"materialized\" ,\n                    cast(null as text) as \"on_schema_change\" ,\n                    cast(null as text) as \"model_group\" ,\n                    cast(null as text) as \"access\" ,\n                    cast(null as text) as \"latest_version\" ,\n                    cast(null as text) as \"version\" ,\n                    cast(null as text) as \"deprecation_date\" ,\n                    cast(null as boolean) as \"is_contract_enforced\" ,\n                    cast(null as integer) as \"total_defined_columns\" ,\n                    cast(null as integer) as \"total_described_columns\" ,\n                    cast(\"database\" as text) as \"database\" ,\n                    cast(\"schema\" as text) as \"schema\" ,\n                    cast(\"package_name\" as text) as \"package_name\" ,\n                    cast(\"alias\" as text) as \"alias\" ,\n                    cast(\"is_described\" as boolean) as \"is_described\" ,\n                    cast(null as text) as \"column_name\" ,\n                    cast(\"meta\" as text) as \"meta\" ,\n                    cast(null as text) as \"hard_coded_references\" ,\n                    cast(null as integer) as \"number_lines\" ,\n                    cast(null as double precision) as \"sql_complexity\" ,\n                    cast(null as text) as \"macro_dependencies\" ,\n                    cast(null as boolean) as \"is_generic_test\" ,\n                    cast(\"is_excluded\" as boolean) as \"is_excluded\" ,\n                    cast(null as text) as \"exposure_type\" ,\n                    cast(null as text) as \"maturity\" ,\n                    cast(null as text) as \"url\" ,\n                    cast(null as text) as \"owner_name\" ,\n                    cast(null as text) as \"owner_email\" ,\n                    cast(null as text) as \"metric_type\" ,\n                    cast(null as text) as \"label\" ,\n                    cast(null as text) as \"metric_filter\" ,\n                    cast(null as text) as \"metric_measure\" ,\n                    cast(null as text) as \"metric_measure_alias\" ,\n                    cast(null as text) as \"numerator\" ,\n                    cast(null as text) as \"denominator\" ,\n                    cast(null as text) as \"expr\" ,\n                    cast(null as text) as \"metric_window\" ,\n                    cast(null as text) as \"grain_to_date\" ,\n                    cast(\"source_name\" as text) as \"source_name\" ,\n                    cast(\"is_source_described\" as boolean) as \"is_source_described\" ,\n                    cast(\"loaded_at_field\" as text) as \"loaded_at_field\" ,\n                    cast(\"is_freshness_enabled\" as boolean) as \"is_freshness_enabled\" ,\n                    cast(\"loader\" as text) as \"loader\" ,\n                    cast(\"identifier\" as text) as \"identifier\" \n\n            from \"dw\".\"public\".\"stg_sources\"\n\n            \n        )\n\n        \n\n),\n\nnaming_convention_prefixes as (\n    select * from \"dw\".\"public\".\"stg_naming_convention_prefixes\"\n), \n\nnaming_convention_folders as (\n    select * from \"dw\".\"public\".\"stg_naming_convention_folders\"\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  source_name || '.' || name\n            when coalesce(version, '') != '' then name || '.v' || version \n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else \n\n  \n    \n\n    split_part(\n        name,\n        '_',\n        1\n        )\n\n\n  \n\n||'_' \n        end as prefix,\n        \n  \n\n    replace(\n        file_path,\n        regexp_replace(file_path,'.*/',''),\n        ''\n    )\n\n\n\n    \n  \n as directory_path,\n        regexp_replace(file_path,'.*/','') as file_name\n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.is_generic_test,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else nullif(naming_convention_prefixes.model_type, '')\n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when \n\n    position(\n        \n  \n    '/'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '/'\n  \n in unioned_with_calc.directory_path\n    ) = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        \n\n    position(\n        \n  \n    '/'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '/'\n  \n in unioned_with_calc.directory_path\n    ) as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_not_null%' and unioned_with_calc.resource_type = 'test' as is_test_not_null,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt_utils.test_unique_combination_of_columns%' and unioned_with_calc.resource_type = 'test' as is_test_unique_combination_of_columns,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_unique%' and unioned_with_calc.resource_type = 'test' as is_test_unique,  \n        \n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.model_group, \n        unioned_with_calc.access, \n        unioned_with_calc.access = 'public' as is_public, \n        unioned_with_calc.latest_version, \n        unioned_with_calc.version, \n        unioned_with_calc.deprecation_date, \n        unioned_with_calc.is_contract_enforced, \n        unioned_with_calc.total_defined_columns, \n        unioned_with_calc.total_described_columns, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.macro_dependencies,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.label, \n        unioned_with_calc.metric_filter,\n        unioned_with_calc.metric_measure,\n        unioned_with_calc.metric_measure_alias,\n        unioned_with_calc.numerator,\n        unioned_with_calc.denominator,\n        unioned_with_calc.expr,\n        unioned_with_calc.metric_window,\n        unioned_with_calc.grain_to_date,\n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.is_freshness_enabled, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier,\n        unioned_with_calc.hard_coded_references, -- NULL for non-model resources\n        unioned_with_calc.number_lines, -- NULL for non-model resources\n        unioned_with_calc.sql_complexity, -- NULL for non-model resources\n        unioned_with_calc.is_excluded -- NULL for metrics and exposures\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "relation_name": "\"dw\".\"public\".\"int_all_graph_resources\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.903517Z", "completed_at": "2025-04-19T19:25:12.908516Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.908711Z", "completed_at": "2025-04-19T19:25:12.908715Z"}], "thread_id": "Thread-1", "execution_time": 0.005751132965087891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_dbt_project.int_customer_orders", "compiled": true, "compiled_code": "with customers as (\n    select * from \"dw\".\"public\".\"stg_jaffle_shop__customers\"\n)\n,\n\norders as (\n    select * from \"dw\".\"public\".\"stg_jaffle_shop__orders\"\n)\n,\n\ncustomer_orders as (\n    select\n        c.customer_id,\n        min(o.order_date) as first_order_date,\n        max(o.order_date) as most_recent_order_date,\n        count(o.order_id) as number_of_orders\n    from customers as c\n    left join orders as o\n        on c.customer_id = o.customer_id\n    group by 1\n)\n\nselect * from customer_orders", "relation_name": "\"dw\".\"public\".\"int_customer_orders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.909687Z", "completed_at": "2025-04-19T19:25:12.939601Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.939911Z", "completed_at": "2025-04-19T19:25:12.939920Z"}], "thread_id": "Thread-1", "execution_time": 0.03222990036010742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_dbt_project.int_orders__pivoted", "compiled": true, "compiled_code": "\n\n\n\nwith source as (\n    select * from \"dw\".\"public\".\"stg_jaffle_shop__payments\"\n)\n\nselect \n    order_id,\n    \n    sum(case when paymentmethod = 'credit_card' then amount/100 else 0 end) as credit_card_amount,\n    sum(case when paymentmethod = 'bank_transfer' then amount/100 else 0 end) as bank_transfer_amount,\n    sum(case when paymentmethod = 'coupon' then amount/100 else 0 end) as coupon_amount,\n    sum(case when paymentmethod = 'gift_card' then amount/100 else 0 end) as gift_card_amount\n    \nfrom source\ngroup by 1", "relation_name": "\"dw\".\"public\".\"int_orders__pivoted\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.942442Z", "completed_at": "2025-04-19T19:25:12.947992Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.948258Z", "completed_at": "2025-04-19T19:25:12.948265Z"}], "thread_id": "Thread-1", "execution_time": 0.006333112716674805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_dbt_project.int_payment_orders", "compiled": true, "compiled_code": "with source as (\n    select * from \"dw\".\"public\".\"stg_jaffle_shop__payments\"\n)\n,\n\npayment_orders as (\n    select\n        order_id,\n        max(created) as payment_finalized_date,\n        sum(\nround(amount / 100, 2)\n) as total_amount_paid\n    from source\n    where status <> 'fail'\n    group by 1\n)\n\nselect * from payment_orders", "relation_name": "\"dw\".\"public\".\"int_payment_orders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.949323Z", "completed_at": "2025-04-19T19:25:12.957909Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.958132Z", "completed_at": "2025-04-19T19:25:12.958139Z"}], "thread_id": "Thread-1", "execution_time": 0.009324073791503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_documentation_coverage", "compiled": true, "compiled_code": "with\n\nmodels as (\n    select * from \"dw\".\"public\".\"int_all_graph_resources\"\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when is_described and model_type = 'base' then 1.0 else 0 end as is_described_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when is_described and model_type = 'staging' then 1.0 else 0 end as is_described_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when is_described and model_type = 'intermediate' then 1.0 else 0 end as is_described_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when is_described and model_type = 'marts' then 1.0 else 0 end as is_described_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when is_described and model_type = 'other' then 1.0 else 0 end as is_described_other_model\n        \n\n    from models\n),\n\nfinal as (\n    select\n        now() as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(is_described_model) as integer) as documented_models,\n        round(sum(is_described_model) * 100.00 / count(*), 2) as documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_base_model) * 100 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_staging_model) * 100 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_intermediate_model) * 100 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_marts_model) * 100 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_other_model) * 100 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_documentation_coverage_pct\n        \n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "relation_name": "\"dw\".\"public\".\"fct_documentation_coverage\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.959118Z", "completed_at": "2025-04-19T19:25:12.969229Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.969457Z", "completed_at": "2025-04-19T19:25:12.969463Z"}], "thread_id": "Thread-1", "execution_time": 0.010831832885742188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_duplicate_sources", "compiled": true, "compiled_code": "with sources as (\n    select\n        resource_name,\n        case \n            -- if you're using databricks but not the unity catalog, database will be null\n            when database is NULL then schema || '.' || identifier \n            else database || '.' || schema || '.' || identifier \n        end as source_db_location \n    from \"dw\".\"public\".\"int_all_graph_resources\"\n    where resource_type = 'source'\n    and not is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nsource_duplicates as (\n    select\n        source_db_location,\n        \n    string_agg(\n        resource_name,\n        ', '\n        \n        ) as source_names\n    from sources\n    group by source_db_location\n    having count(*) > 1\n)\n\nselect * from source_duplicates\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_duplicate_sources\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.970417Z", "completed_at": "2025-04-19T19:25:12.974354Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.974610Z", "completed_at": "2025-04-19T19:25:12.974615Z"}], "thread_id": "Thread-1", "execution_time": 0.004688262939453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_hard_coded_references", "compiled": true, "compiled_code": "-- this model finds cases where a model has hard coded references\n\nwith models as (\n    select * from \"dw\".\"public\".\"int_all_graph_resources\"\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nfinal as (\n    select\n        resource_name as model,\n        hard_coded_references\n    from models\n    where hard_coded_references != ''\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_hard_coded_references\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.975593Z", "completed_at": "2025-04-19T19:25:12.981605Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.981800Z", "completed_at": "2025-04-19T19:25:12.981805Z"}], "thread_id": "Thread-1", "execution_time": 0.006674289703369141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_naming_conventions", "compiled": true, "compiled_code": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from \"dw\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n    -- exclude required metricflow time spine\n    and resource_name != 'metricflow_time_spine'\n),\n\nnaming_convention_prefixes as (\n    select * from \"dw\".\"public\".\"stg_naming_convention_prefixes\"\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by prefix_value\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        \n    string_agg(\n        prefix_value,\n        ', '\n        \n        ) as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where nullif(models.prefix_value, '') is null\n\n)\n\nselect * from inappropriate_model_names\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_model_naming_conventions\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.982725Z", "completed_at": "2025-04-19T19:25:12.986000Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.986203Z", "completed_at": "2025-04-19T19:25:12.986208Z"}], "thread_id": "Thread-1", "execution_time": 0.003933906555175781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_public_models_without_contract", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from \"dw\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nfinal as (\n\n    select \n        resource_name,\n        is_public,\n        is_contract_enforced\n        \n    from all_resources\n    where \n        is_public \n        and not is_contract_enforced\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_public_models_without_contract\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.987199Z", "completed_at": "2025-04-19T19:25:12.993785Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.994036Z", "completed_at": "2025-04-19T19:25:12.994043Z"}], "thread_id": "Thread-1", "execution_time": 0.007358074188232422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_source_directories", "compiled": true, "compiled_code": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\n\n\nwith all_graph_resources as (\n    select * from \"dw\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models/' || 'staging' || '/' || source_name || '/' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_source_directories\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:12.995031Z", "completed_at": "2025-04-19T19:25:12.999050Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:12.999239Z", "completed_at": "2025-04-19T19:25:12.999244Z"}], "thread_id": "Thread-1", "execution_time": 0.004673004150390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_sources_without_freshness", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"dw\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        resource_name\n\n    from all_resources\n    where not is_freshness_enabled and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_sources_without_freshness\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.000148Z", "completed_at": "2025-04-19T19:25:13.003531Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.003712Z", "completed_at": "2025-04-19T19:25:13.003716Z"}], "thread_id": "Thread-1", "execution_time": 0.003981828689575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_models", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"dw\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_undocumented_models\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.004593Z", "completed_at": "2025-04-19T19:25:13.009045Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.009223Z", "completed_at": "2025-04-19T19:25:13.009227Z"}], "thread_id": "Thread-1", "execution_time": 0.005043983459472656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_public_models", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from \"dw\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nfinal as (\n    select \n        resource_name,\n        access, \n        is_described, \n        total_defined_columns,\n        total_described_columns\n    \n    from all_resources\n    where \n        is_public \n        and (\n            -- no model level description\n            not is_described\n            -- not all columns defined have descriptions\n            or total_described_columns < total_defined_columns\n            -- no columns defined at all\n            or total_defined_columns = 0\n        )\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_undocumented_public_models\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.010111Z", "completed_at": "2025-04-19T19:25:13.013507Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.013731Z", "completed_at": "2025-04-19T19:25:13.013736Z"}], "thread_id": "Thread-1", "execution_time": 0.004063129425048828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_source_tables", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"dw\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name\n\n    from all_resources\n    where not is_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_undocumented_source_tables\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.014689Z", "completed_at": "2025-04-19T19:25:13.018914Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.019154Z", "completed_at": "2025-04-19T19:25:13.019160Z"}], "thread_id": "Thread-1", "execution_time": 0.00491786003112793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_sources", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"dw\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        source_name\n\n    from all_resources\n    where not is_source_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_undocumented_sources\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.020123Z", "completed_at": "2025-04-19T19:25:13.025941Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.026141Z", "completed_at": "2025-04-19T19:25:13.026146Z"}], "thread_id": "Thread-1", "execution_time": 0.006487131118774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_direct_relationships", "compiled": true, "compiled_code": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        is_public, \n        access, \n        source_name,\n        is_excluded\n    from \"dw\".\"public\".\"int_all_graph_resources\"\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from \"dw\".\"public\".\"stg_node_relationships\"\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from \"dw\".\"public\".\"stg_exposure_relationships\"\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from \"dw\".\"public\".\"stg_metric_relationships\"\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.resource_id,\n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.file_path,\n        all_graph_resources.directory_path, \n        all_graph_resources.file_name,\n        all_graph_resources.model_type,\n        all_graph_resources.materialized,\n        all_graph_resources.is_public, \n        all_graph_resources.access, \n        all_graph_resources.source_name,\n        all_graph_resources.is_excluded,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "relation_name": "\"dw\".\"public\".\"int_direct_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.027081Z", "completed_at": "2025-04-19T19:25:13.030724Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.030971Z", "completed_at": "2025-04-19T19:25:13.030977Z"}], "thread_id": "Thread-1", "execution_time": 0.0043849945068359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_dbt_project.int_paid_orders", "compiled": true, "compiled_code": "with orders as (\n    select * from \"dw\".\"public\".\"stg_jaffle_shop__orders\"\n)\n,\n\ncustomers as (\n    select * from \"dw\".\"public\".\"stg_jaffle_shop__customers\"\n)\n,\n\npayment_orders as (\n    select * from \"dw\".\"public\".\"int_payment_orders\"\n)\n,\n\npaid_orders as (\n    select\n        o.order_id,\n        o.customer_id,\n        o.order_date as order_placed_at,\n        o.status as order_status,\n        p.total_amount_paid,\n        p.payment_finalized_date,\n        c.first_name as customer_first_name,\n        c.last_name as customer_last_name\n    from orders as o\n    left join payment_orders as p on o.order_id = p.order_id\n    left join customers as c on o.customer_id = c.customer_id\n\n)\n\nselect * from paid_orders", "relation_name": "\"dw\".\"public\".\"int_paid_orders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.031968Z", "completed_at": "2025-04-19T19:25:13.040217Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.040414Z", "completed_at": "2025-04-19T19:25:13.040420Z"}], "thread_id": "Thread-1", "execution_time": 0.008938074111938477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"dw\".\"public\".\"fct_documentation_coverage\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not documentation_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.041297Z", "completed_at": "2025-04-19T19:25:13.045240Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.045426Z", "completed_at": "2025-04-19T19:25:13.045429Z"}], "thread_id": "Thread-1", "execution_time": 0.004523038864135742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_duplicate_sources\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.046235Z", "completed_at": "2025-04-19T19:25:13.049741Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.049937Z", "completed_at": "2025-04-19T19:25:13.049941Z"}], "thread_id": "Thread-1", "execution_time": 0.004090785980224609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_hard_coded_references\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.050826Z", "completed_at": "2025-04-19T19:25:13.055520Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.055722Z", "completed_at": "2025-04-19T19:25:13.055728Z"}], "thread_id": "Thread-1", "execution_time": 0.005330085754394531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_model_naming_conventions\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.056552Z", "completed_at": "2025-04-19T19:25:13.061957Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.062146Z", "completed_at": "2025-04-19T19:25:13.062150Z"}], "thread_id": "Thread-1", "execution_time": 0.005980968475341797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_public_models_without_contract\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.062954Z", "completed_at": "2025-04-19T19:25:13.066206Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.066391Z", "completed_at": "2025-04-19T19:25:13.066395Z"}], "thread_id": "Thread-1", "execution_time": 0.0038170814514160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_source_directories\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.067183Z", "completed_at": "2025-04-19T19:25:13.070508Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.070694Z", "completed_at": "2025-04-19T19:25:13.070698Z"}], "thread_id": "Thread-1", "execution_time": 0.0038900375366210938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_sources_without_freshness\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.071481Z", "completed_at": "2025-04-19T19:25:13.074718Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.074904Z", "completed_at": "2025-04-19T19:25:13.074907Z"}], "thread_id": "Thread-1", "execution_time": 0.003801107406616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_undocumented_models\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.075690Z", "completed_at": "2025-04-19T19:25:13.079456Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.079639Z", "completed_at": "2025-04-19T19:25:13.079642Z"}], "thread_id": "Thread-1", "execution_time": 0.00432586669921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_undocumented_public_models\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.080423Z", "completed_at": "2025-04-19T19:25:13.083493Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.083679Z", "completed_at": "2025-04-19T19:25:13.083683Z"}], "thread_id": "Thread-1", "execution_time": 0.0036318302154541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_undocumented_source_tables\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.084470Z", "completed_at": "2025-04-19T19:25:13.088525Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.088743Z", "completed_at": "2025-04-19T19:25:13.088749Z"}], "thread_id": "Thread-1", "execution_time": 0.004677772521972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_undocumented_sources\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.089642Z", "completed_at": "2025-04-19T19:25:13.093900Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.094108Z", "completed_at": "2025-04-19T19:25:13.094113Z"}], "thread_id": "Thread-1", "execution_time": 0.004900693893432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_test_directories", "compiled": true, "compiled_code": "with\n\nresources as (\n\n    select * from \"dw\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nrelationships as (\n\n    select * from \"dw\".\"public\".\"int_direct_relationships\"\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where \n        resource_type = 'test'\n        and is_generic_test\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_test_directories\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.095062Z", "completed_at": "2025-04-19T19:25:13.105142Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.105337Z", "completed_at": "2025-04-19T19:25:13.105342Z"}], "thread_id": "Thread-1", "execution_time": 0.010750055313110352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_all_dag_relationships", "compiled": true, "compiled_code": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n\n\nwith recursive direct_relationships as (\n    select\n        *\n    from \"dw\".\"public\".\"int_direct_relationships\"\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_access,\n    parent_is_public,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    parent_is_excluded,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_access,\n    child_is_public,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    child_is_excluded,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor\n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        access as parent_access,\n        is_public as parent_is_public,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        is_excluded as parent_is_excluded,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        access as child_access,\n        is_public as child_is_public,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        is_excluded as child_is_excluded,\n        0 as distance,\n        \n    array[ resource_name ]\n     as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null \n\n    union all\n\n    -- recursive clause\n    select\n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_access as parent_access,\n        all_relationships.parent_is_public as parent_is_public,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        all_relationships.parent_is_excluded as parent_is_excluded,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.access as child_access,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        direct_relationships.is_excluded as child_is_excluded,\n        all_relationships.distance+1 as distance,\n        array_append(all_relationships.path, direct_relationships.resource_name) as path,\n        case\n            when\n                all_relationships.child_materialized in ('view', 'ephemeral')\n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n\n    \n\n)\n\n\n\nselect * from all_relationships\norder by parent, distance", "relation_name": "\"dw\".\"public\".\"int_all_dag_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.106385Z", "completed_at": "2025-04-19T19:25:13.113486Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.113681Z", "completed_at": "2025-04-19T19:25:13.113686Z"}], "thread_id": "Thread-1", "execution_time": 0.007860898971557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_model_test_summary", "compiled": true, "compiled_code": "with \n\nall_graph_resources as (\n    select * from \"dw\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nrelationships as (\n    select * from \"dw\".\"public\".\"int_direct_relationships\"\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        sum(case\n                when all_graph_resources.is_test_unique\n                then 1\n                else 0\n            end\n         ) as test_unique_count,count(distinct case when \n                all_graph_resources.is_test_unique or  \n                all_graph_resources.is_test_not_null\n            then relationships.resource_id else null end\n        ) as primary_key_method_1_count,count(distinct case when \n                all_graph_resources.is_test_unique_combination_of_columns\n            then relationships.resource_id else null end\n        ) as primary_key_method_2_count,\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\ncount_column_constraints as (\n\n    select\n        node_unique_id as direct_parent_id,\n        name as column_name,\n        case\n            when has_not_null_constraint\n            then 1\n            else 0\n        end as constraint_not_null_count,\n        constraints_count\n    from \"dw\".\"public\".\"base_node_columns\"\n\n),\n\ncombine_column_counts as (\n\n    select\n        count_column_tests.*,\n        count_column_tests.test_unique_count + count_column_constraints.constraint_not_null_count as primary_key_mixed_method_count,\n        count_column_constraints.constraints_count\n    from count_column_tests\n    left join count_column_constraints\n        on count_column_tests.direct_parent_id = count_column_constraints.direct_parent_id\n        and count_column_tests.column_name = count_column_constraints.column_name\n\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        cast(sum(case \n                when (\n                    primary_key_method_1_count >= 2\n                        or\n                    primary_key_method_2_count >= 1\n                        or\n                    primary_key_mixed_method_count >= 2\n                ) then 1 \n                else 0 \n            end\n        ) >= 1 as boolean) as is_primary_key_tested,\n        cast(sum(tests_count) as integer) as number_of_tests_on_model,\n        cast(sum(constraints_count) as integer) as number_of_constraints_on_model\n    from combine_column_counts\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        cast(coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as boolean) as is_primary_key_tested,\n        cast(coalesce(agg_test_relationships.number_of_tests_on_model, 0) as integer) as number_of_tests_on_model,\n        cast(coalesce(agg_test_relationships.number_of_constraints_on_model, 0) as integer) as number_of_constraints_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where\n        all_graph_resources.resource_type in ('model', 'seed', 'source', 'snapshot')\n)\n\nselect * from final", "relation_name": "\"dw\".\"public\".\"int_model_test_summary\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.114581Z", "completed_at": "2025-04-19T19:25:13.139302Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.139489Z", "completed_at": "2025-04-19T19:25:13.139493Z"}], "thread_id": "Thread-1", "execution_time": 0.025371074676513672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_dbt_project.fct_sales", "compiled": true, "compiled_code": "with customer_orders as (\n    select * from \"dw\".\"public\".\"int_customer_orders\"\n),\n\npaid_orders as (\n    select * from \"dw\".\"public\".\"int_paid_orders\"\n),\n\nsales as (\n    select\n        p.*,\n        row_number() over (\n            order by p.order_id\n        ) as transaction_seq,\n        row_number() over (\n            partition by p.customer_id\n            order by p.order_id\n        ) as customer_sales_seq,\n        case\n            when c.first_order_date = p.order_placed_at\n                then 'new'\n            else 'return'\n        end as nvsr,\n        sum(p.total_amount_paid) over (\n            partition by p.customer_id\n            order by p.customer_id\n        ) as customer_lifetime_value,\n        c.first_order_date as fdos\n    from paid_orders as p\n    left join customer_orders as c on p.customer_id = c.customer_id\n)\n\nselect * from sales", "relation_name": "\"dw\".\"public\".\"fct_sales\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.140419Z", "completed_at": "2025-04-19T19:25:13.144082Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.144286Z", "completed_at": "2025-04-19T19:25:13.144290Z"}], "thread_id": "Thread-1", "execution_time": 0.004344940185546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_test_directories\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.145181Z", "completed_at": "2025-04-19T19:25:13.148984Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.149173Z", "completed_at": "2025-04-19T19:25:13.149176Z"}], "thread_id": "Thread-1", "execution_time": 0.004435300827026367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_chained_views_dependencies", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where distance <> 0\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n    and distance > 5\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n\n\norder by distance desc", "relation_name": "\"dw\".\"public\".\"fct_chained_views_dependencies\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.150035Z", "completed_at": "2025-04-19T19:25:13.154152Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.154335Z", "completed_at": "2025-04-19T19:25:13.154338Z"}], "thread_id": "Thread-1", "execution_time": 0.0047380924224853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_direct_join_to_source", "compiled": true, "compiled_code": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where child_resource_type = 'model'\n    and distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.parent,\n        direct_model_relationships.parent_resource_type,\n        direct_model_relationships.child,\n        direct_model_relationships.child_resource_type,\n        direct_model_relationships.distance\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_direct_join_to_source\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.155224Z", "completed_at": "2025-04-19T19:25:13.158631Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.158816Z", "completed_at": "2025-04-19T19:25:13.158820Z"}], "thread_id": "Thread-1", "execution_time": 0.004033803939819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_exposure_parents_materializations", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and ((\n                parent_resource_type = 'model'\n                and parent_materialized in ('view', 'ephemeral')\n            )\n            or (\n                parent_resource_type = 'source'\n            )\n        )\n        -- no test on child_is_excluded because exposures are never excluded\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        parent_resource_type,\n        parent as parent_resource_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_exposure_parents_materializations\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.159677Z", "completed_at": "2025-04-19T19:25:13.163643Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.163827Z", "completed_at": "2025-04-19T19:25:13.163830Z"}], "thread_id": "Thread-1", "execution_time": 0.004582881927490234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and not (\n                parent_resource_type = 'model'\n                and parent_is_public\n            )\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        child as exposure_name,\n        parent as parent_resource_name,\n        parent_access,\n        parent_resource_type\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_exposures_dependent_on_private_models\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.164671Z", "completed_at": "2025-04-19T19:25:13.167704Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.167892Z", "completed_at": "2025-04-19T19:25:13.167895Z"}], "thread_id": "Thread-1", "execution_time": 0.0036230087280273438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "compiled": true, "compiled_code": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_marts_or_intermediate_dependent_on_source\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.168802Z", "completed_at": "2025-04-19T19:25:13.175716Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.175889Z", "completed_at": "2025-04-19T19:25:13.175893Z"}], "thread_id": "Thread-1", "execution_time": 0.007570981979370117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_directories", "compiled": true, "compiled_code": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n\n \nwith all_graph_resources as (\n    select * from \"dw\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nfolders as (\n    select * from \"dw\".\"public\".\"stg_naming_convention_folders\"\n), \n\nall_dag_relationships as (\n    select * from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where not child_is_excluded\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models/' || 'staging' || '/' || parent_source_name || '/' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '/.../' || folders.folder_name_value || '/.../' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_model_directories\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.176763Z", "completed_at": "2025-04-19T19:25:13.180974Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.181157Z", "completed_at": "2025-04-19T19:25:13.181160Z"}], "thread_id": "Thread-1", "execution_time": 0.004831075668334961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_fanout", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select  \n        *\n    from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        all_dag_relationships.parent_model_type,\n        all_dag_relationships.child\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1, 2, 3\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2, 3\n),\n\nmodel_fanout_agg as (\n    select\n        parent,\n        parent_model_type,\n        \n    string_agg(\n        child,\n        ', '\n        \n        ) as leaf_children\n    from model_fanout\n    group by 1, 2\n    having count(*) >= 3\n)\n\nselect * from model_fanout_agg\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_model_fanout\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.182006Z", "completed_at": "2025-04-19T19:25:13.186778Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.186948Z", "completed_at": "2025-04-19T19:25:13.186952Z"}], "thread_id": "Thread-1", "execution_time": 0.0053501129150390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_multiple_sources_joined", "compiled": true, "compiled_code": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select distinct\n        child,\n        parent\n    from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where distance = 1\n    and parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        \n    string_agg(\n        parent,\n        ', '\n        \n        ) as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_multiple_sources_joined\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.187824Z", "completed_at": "2025-04-19T19:25:13.192144Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.192326Z", "completed_at": "2025-04-19T19:25:13.192330Z"}], "thread_id": "Thread-1", "execution_time": 0.004945993423461914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where parent_resource_type not in ('exposure', 'metric')\n    and child_resource_type not in ('exposure', 'metric')\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_rejoining_of_upstream_concepts\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.193156Z", "completed_at": "2025-04-19T19:25:13.196991Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.197171Z", "completed_at": "2025-04-19T19:25:13.197174Z"}], "thread_id": "Thread-1", "execution_time": 0.004411935806274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_root_models", "compiled": true, "compiled_code": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where child_resource_type = 'model'\n    -- only filter out excluded children nodes\n        -- filtering parents could result in incorrectly flagging nodes that depend on excluded nodes\n    and not child_is_excluded\n    -- exclude required time spine\n    and child != 'metricflow_time_spine'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_root_models\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.198000Z", "completed_at": "2025-04-19T19:25:13.202629Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.202799Z", "completed_at": "2025-04-19T19:25:13.202802Z"}], "thread_id": "Thread-1", "execution_time": 0.005198240280151367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_source_fanout", "compiled": true, "compiled_code": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by child\n),\n\nsource_fanout as (\n    select\n        parent,\n        \n    string_agg(\n        child,\n        ', '\n        \n        ) as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_source_fanout\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.203658Z", "completed_at": "2025-04-19T19:25:13.206633Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.206807Z", "completed_at": "2025-04-19T19:25:13.206810Z"}], "thread_id": "Thread-1", "execution_time": 0.0035529136657714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "compiled": true, "compiled_code": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_staging_dependent_on_marts_or_intermediate\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.207634Z", "completed_at": "2025-04-19T19:25:13.210765Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.210944Z", "completed_at": "2025-04-19T19:25:13.210947Z"}], "thread_id": "Thread-1", "execution_time": 0.0037088394165039062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "compiled": true, "compiled_code": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and not parent_is_excluded\n    and not child_is_excluded\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_staging_dependent_on_staging\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.211762Z", "completed_at": "2025-04-19T19:25:13.215230Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.215409Z", "completed_at": "2025-04-19T19:25:13.215412Z"}], "thread_id": "Thread-1", "execution_time": 0.004040956497192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_too_many_joins", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select\n        *\n    from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where not child_is_excluded\n    and child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child as resource_name,\n        child_file_path as file_path,\n        cast(count(distinct parent) as integer) as join_count\n    from all_dag_relationships\n    where distance = 1\n    group by 1, 2\n    having count(distinct parent) >= 7\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_too_many_joins\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.216242Z", "completed_at": "2025-04-19T19:25:13.219956Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.220132Z", "completed_at": "2025-04-19T19:25:13.220135Z"}], "thread_id": "Thread-1", "execution_time": 0.004283905029296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_unused_sources", "compiled": true, "compiled_code": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from \"dw\".\"public\".\"int_all_dag_relationships\"\n    where parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_unused_sources\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.220959Z", "completed_at": "2025-04-19T19:25:13.224856Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.225026Z", "completed_at": "2025-04-19T19:25:13.225030Z"}], "thread_id": "Thread-1", "execution_time": 0.004470109939575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_missing_primary_key_tests", "compiled": true, "compiled_code": "with\n\ntests as (\n    select * from \"dw\".\"public\".\"int_model_test_summary\"\n    where resource_type in\n    (\n        'model'\n        \n    )\n),\n\nfinal as (\n\n    select\n        resource_name,\n        resource_type,\n        model_type,\n        is_primary_key_tested,\n        number_of_tests_on_model,\n        number_of_constraints_on_model\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"dw\".\"public\".\"fct_missing_primary_key_tests\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.225859Z", "completed_at": "2025-04-19T19:25:13.234794Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.234958Z", "completed_at": "2025-04-19T19:25:13.234960Z"}], "thread_id": "Thread-1", "execution_time": 0.009527921676635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_test_coverage", "compiled": true, "compiled_code": "with\n\ntest_counts as (\n    select * from \"dw\".\"public\".\"int_model_test_summary\"\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_name,\n        cast(case when number_of_tests_on_model > 0 then 1 else 0 end as boolean) as is_tested_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when number_of_tests_on_model > 0 and model_type = 'base' then 1.0 else 0 end as is_tested_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when number_of_tests_on_model > 0 and model_type = 'staging' then 1.0 else 0 end as is_tested_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when number_of_tests_on_model > 0 and model_type = 'intermediate' then 1.0 else 0 end as is_tested_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when number_of_tests_on_model > 0 and model_type = 'marts' then 1.0 else 0 end as is_tested_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when number_of_tests_on_model > 0 and model_type = 'other' then 1.0 else 0 end as is_tested_other_model\n        \n\n    from test_counts\n),\n\nfinal as (\n    select\n        now() as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(number_of_tests_on_model) as integer) as total_tests,\n        sum(cast(is_tested_model as integer)) as tested_models,\n        round(sum(cast(is_tested_model as integer)) * 100.0 / count(*), 2) as test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_base_model) * 100.0 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_staging_model) * 100.0 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_intermediate_model) * 100.0 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_marts_model) * 100.0 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_other_model) * 100.0 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_test_coverage_pct,\n        \n        round(sum(number_of_tests_on_model) * 1.0000 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "relation_name": "\"dw\".\"public\".\"fct_test_coverage\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.235787Z", "completed_at": "2025-04-19T19:25:13.240348Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.240523Z", "completed_at": "2025-04-19T19:25:13.240526Z"}], "thread_id": "Thread-1", "execution_time": 0.005134105682373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_chained_views_dependencies\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.241350Z", "completed_at": "2025-04-19T19:25:13.245648Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.245829Z", "completed_at": "2025-04-19T19:25:13.245832Z"}], "thread_id": "Thread-1", "execution_time": 0.004871845245361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_direct_join_to_source\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.246641Z", "completed_at": "2025-04-19T19:25:13.252656Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.252838Z", "completed_at": "2025-04-19T19:25:13.252841Z"}], "thread_id": "Thread-1", "execution_time": 0.006587982177734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_exposure_parents_materializations\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.253668Z", "completed_at": "2025-04-19T19:25:13.258457Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.258636Z", "completed_at": "2025-04-19T19:25:13.258638Z"}], "thread_id": "Thread-1", "execution_time": 0.005361080169677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_exposures_dependent_on_private_models\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.259455Z", "completed_at": "2025-04-19T19:25:13.264149Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.264394Z", "completed_at": "2025-04-19T19:25:13.264398Z"}], "thread_id": "Thread-1", "execution_time": 0.0053539276123046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_marts_or_intermediate_dependent_on_source\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.265347Z", "completed_at": "2025-04-19T19:25:13.272224Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.272412Z", "completed_at": "2025-04-19T19:25:13.272417Z"}], "thread_id": "Thread-1", "execution_time": 0.0075299739837646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_model_directories\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.273297Z", "completed_at": "2025-04-19T19:25:13.278468Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.278644Z", "completed_at": "2025-04-19T19:25:13.278648Z"}], "thread_id": "Thread-1", "execution_time": 0.005761861801147461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_model_fanout\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.279496Z", "completed_at": "2025-04-19T19:25:13.284484Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.284662Z", "completed_at": "2025-04-19T19:25:13.284665Z"}], "thread_id": "Thread-1", "execution_time": 0.0055789947509765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_multiple_sources_joined\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.285514Z", "completed_at": "2025-04-19T19:25:13.291728Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.291908Z", "completed_at": "2025-04-19T19:25:13.291911Z"}], "thread_id": "Thread-1", "execution_time": 0.006803989410400391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_rejoining_of_upstream_concepts\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.292746Z", "completed_at": "2025-04-19T19:25:13.298828Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.299014Z", "completed_at": "2025-04-19T19:25:13.299018Z"}], "thread_id": "Thread-1", "execution_time": 0.006666898727416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_root_models\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.299918Z", "completed_at": "2025-04-19T19:25:13.305632Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.305828Z", "completed_at": "2025-04-19T19:25:13.305831Z"}], "thread_id": "Thread-1", "execution_time": 0.006390094757080078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_source_fanout\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.306731Z", "completed_at": "2025-04-19T19:25:13.312964Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.313153Z", "completed_at": "2025-04-19T19:25:13.313156Z"}], "thread_id": "Thread-1", "execution_time": 0.006849050521850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_staging_dependent_on_marts_or_intermediate\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.314035Z", "completed_at": "2025-04-19T19:25:13.320516Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.320702Z", "completed_at": "2025-04-19T19:25:13.320706Z"}], "thread_id": "Thread-1", "execution_time": 0.007087230682373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_staging_dependent_on_staging\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.321579Z", "completed_at": "2025-04-19T19:25:13.326498Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.326688Z", "completed_at": "2025-04-19T19:25:13.326691Z"}], "thread_id": "Thread-1", "execution_time": 0.00553584098815918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_too_many_joins\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.327597Z", "completed_at": "2025-04-19T19:25:13.332823Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.333055Z", "completed_at": "2025-04-19T19:25:13.333060Z"}], "thread_id": "Thread-1", "execution_time": 0.005912065505981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_unused_sources\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.333997Z", "completed_at": "2025-04-19T19:25:13.338131Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.338350Z", "completed_at": "2025-04-19T19:25:13.338356Z"}], "thread_id": "Thread-1", "execution_time": 0.004797935485839844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"dw\".\"public\".\"fct_missing_primary_key_tests\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-19T19:25:13.339264Z", "completed_at": "2025-04-19T19:25:13.343696Z"}, {"name": "execute", "started_at": "2025-04-19T19:25:13.343900Z", "completed_at": "2025-04-19T19:25:13.343904Z"}], "thread_id": "Thread-1", "execution_time": 0.00506591796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.valid_test_coverage.df03f31e09", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"dw\".\"public\".\"fct_test_coverage\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not test_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 0.9140682220458984, "args": {"log_format": "default", "partial_parse_file_diff": true, "invocation_command": "dbt compile", "empty": false, "require_batched_execution_for_custom_microbatch_strategy": false, "which": "compile", "favor_state": false, "defer": false, "state_modified_compare_vars": false, "strict_mode": false, "output": "text", "vars": {}, "indirect_selection": "eager", "inject_ephemeral_ctes": true, "log_level_file": "debug", "send_anonymous_usage_stats": true, "static_parser": true, "require_yaml_configuration_for_mf_time_spines": false, "source_freshness_run_project_hooks": false, "print": true, "log_level": "info", "log_path": "/Users/fehmmialiti/docker_learning/dbt_airflow/dbt_project/logs", "write_json": true, "printer_width": 80, "partial_parse": true, "require_resource_names_without_spaces": false, "project_dir": "/Users/fehmmialiti/docker_learning/dbt_airflow/dbt_project", "log_file_max_bytes": 10485760, "cache_selected_only": false, "introspect": true, "populate_cache": true, "quiet": false, "require_nested_cumulative_type_params": false, "skip_nodes_if_on_run_start_fails": false, "log_format_file": "debug", "require_explicit_package_overrides_for_builtin_materializations": true, "show_resource_report": false, "macro_debugging": false, "state_modified_compare_more_unrendered_values": false, "profiles_dir": "/Users/fehmmialiti/docker_learning/dbt_airflow/dbt_project", "select": [], "version_check": true, "use_colors": true, "use_colors_file": true, "warn_error_options": {"include": [], "exclude": []}, "exclude": []}}